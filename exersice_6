use std::thread;
use std::time::Instant;

fn is_prime(n: u128) -> bool {
    if n < 2 {
        return false;
    }
    if n == 2 {
        return true;
    }
    if n % 2 == 0 {
        return false;
    }
    let mut i = 3;
    while i * i <= n {
        if n % i == 0 {
            return false;
        }
        i += 2;
    }
    true
}

fn sequential_primes(start: u128, end: u128) -> Vec<u128> {
    (start..=end).filter(|&n| is_prime(n)).collect()
}

fn parallel_primes(start: u128, end: u128, threads: usize) -> Vec<u128> {
    let range = end - start + 1;
    let chunk_size = range / threads as u128;
    let mut handles = vec![];
    let mut results = vec![];

    for i in 0..threads {
        let chunk_start = start + i as u128 * chunk_size;
        let chunk_end = if i == threads - 1 {
            end
        } else {
            chunk_start + chunk_size - 1
        };

        let handle = thread::spawn(move || sequential_primes(chunk_start, chunk_end));
        handles.push(handle);
    }

    for handle in handles {
        let mut chunk_result = handle.join().unwrap();
        results.append(&mut chunk_result);
    }

    results.sort(); // opcional
    results
}

fn benchmark(n: u128, threads: usize) {
    println!("n = {}, threads = {}", n, threads);

    let start = Instant::now();
    let seq_primes = sequential_primes(2, n);
    let duration_seq = start.elapsed();
    println!("Sequencial: {} ms", duration_seq.as_millis());

    let start = Instant::now();
    let par_primes = parallel_primes(2, n, threads);
    let duration_par = start.elapsed();
    println!("Paralelo: {} ms", duration_par.as_millis());

    // Gravar CSV
    println!(
        "RESULTADO: n={},threads={},seq_ms={},par_ms={}",
        n,
        threads,
        duration_seq.as_millis(),
        duration_par.as_millis()
    );
}

fn main() {
    let test_cases = vec![
        (10000_000u128, 2),
        (10000_000u128, 4),
        (10000_000u128, 8),
        (10000_000u128, 10),
        (10000_000u128, 12),
    ];

    for (n, threads) in test_cases {
        benchmark(n, threads);
    }
}

